ARM GAS  /tmp/ccxildGF.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.cpp"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text._ZN3LCD7centralEv,"ax",%progbits
  16              		.align	1
  17              		.global	_ZN3LCD7centralEv
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	_ZN3LCD7centralEv:
  24              	.LFB1439:
  25              		.file 1 "../../src/lcd_ram.h"
   1:../../src/lcd_ram.h **** #include <array>
   2:../../src/lcd_ram.h **** #include <cstddef>
   3:../../src/lcd_ram.h **** 
   4:../../src/lcd_ram.h **** 
   5:../../src/lcd_ram.h **** class LCD
   6:../../src/lcd_ram.h **** {
   7:../../src/lcd_ram.h ****    size_t line     {0};
   8:../../src/lcd_ram.h ****    size_t index    {0};
   9:../../src/lcd_ram.h ****    size_t position {0};
  10:../../src/lcd_ram.h ****    bool centre {false};
  11:../../src/lcd_ram.h **** 
  12:../../src/lcd_ram.h ****    std::array<char, 80> screen;
  13:../../src/lcd_ram.h ****    static constexpr size_t screen_size = 80;
  14:../../src/lcd_ram.h **** 
  15:../../src/lcd_ram.h **** public:
  16:../../src/lcd_ram.h ****    LCD (){screen.fill(' ');}
  17:../../src/lcd_ram.h ****    LCD& operator<< (std::string_view string);
  18:../../src/lcd_ram.h ****    LCD& operator<< (size_t number);
  19:../../src/lcd_ram.h ****    LCD& set_line   (size_t string);
  20:../../src/lcd_ram.h ****    LCD& set_cursor (size_t cursor);
  21:../../src/lcd_ram.h ****    LCD& central();
  22:../../src/lcd_ram.h ****    std::array<char, 80>& get() {return screen;}
  23:../../src/lcd_ram.h **** 
  24:../../src/lcd_ram.h **** };
  25:../../src/lcd_ram.h **** 
  26:../../src/lcd_ram.h **** LCD& LCD::operator<< (std::string_view string)
  27:../../src/lcd_ram.h **** {
  28:../../src/lcd_ram.h ****    size_t rest_string = string.size();
  29:../../src/lcd_ram.h ****       
  30:../../src/lcd_ram.h ****    if (centre){
  31:../../src/lcd_ram.h ****       if (rest_string < 20) {
  32:../../src/lcd_ram.h ****          size_t pos = (20 - rest_string)/2;
  33:../../src/lcd_ram.h ****          std::copy(string.begin(), string.end(), screen.begin() + (line*20 + pos));
ARM GAS  /tmp/ccxildGF.s 			page 2


  34:../../src/lcd_ram.h ****       } else {
  35:../../src/lcd_ram.h ****          std::copy(string.begin() + (rest_string - 20)/2, string.begin() + (rest_string - 20)/2 + 2
  36:../../src/lcd_ram.h ****       }
  37:../../src/lcd_ram.h ****    } else {
  38:../../src/lcd_ram.h ****       if (rest_string < screen_size - position) {
  39:../../src/lcd_ram.h ****          std::copy(string.begin(), string.end(), screen.begin() + position);
  40:../../src/lcd_ram.h ****          position += rest_string;
  41:../../src/lcd_ram.h ****       } else {
  42:../../src/lcd_ram.h ****          std::copy(string.begin(), string.begin() + (screen_size - position), screen.begin() + posi
  43:../../src/lcd_ram.h ****          rest_string -= (screen_size - position);
  44:../../src/lcd_ram.h ****          while (rest_string > screen_size) {
  45:../../src/lcd_ram.h ****             auto string_begin = string.begin() + (string.size() - rest_string);
  46:../../src/lcd_ram.h ****             auto string_end   = string_begin + screen_size;
  47:../../src/lcd_ram.h ****             std::copy(string_begin, string_end, screen.begin());
  48:../../src/lcd_ram.h ****             rest_string -= screen_size;
  49:../../src/lcd_ram.h ****          }
  50:../../src/lcd_ram.h ****          std::copy(string.begin() + (string.size() - rest_string), string.end(), screen.begin());
  51:../../src/lcd_ram.h ****          position += rest_string;
  52:../../src/lcd_ram.h ****       }
  53:../../src/lcd_ram.h ****    }
  54:../../src/lcd_ram.h ****       
  55:../../src/lcd_ram.h ****    return *this;
  56:../../src/lcd_ram.h **** }
  57:../../src/lcd_ram.h **** 
  58:../../src/lcd_ram.h **** LCD& LCD::operator<< (size_t number)
  59:../../src/lcd_ram.h **** {
  60:../../src/lcd_ram.h ****    char ch [10];
  61:../../src/lcd_ram.h ****    snprintf(ch, sizeof(ch), "%d", number);
  62:../../src/lcd_ram.h ****    // __itoa(number, ch, 10);
  63:../../src/lcd_ram.h ****    // std::string_view s (ch);
  64:../../src/lcd_ram.h ****    *this << ch;
  65:../../src/lcd_ram.h ****    return *this;
  66:../../src/lcd_ram.h **** }
  67:../../src/lcd_ram.h **** 
  68:../../src/lcd_ram.h **** LCD& LCD::central ()
  69:../../src/lcd_ram.h **** {
  26              		.loc 1 69 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  70:../../src/lcd_ram.h ****    centre = true;
  32              		.loc 1 70 0
  33 0000 0123     		movs	r3, #1
  34 0002 0373     		strb	r3, [r0, #12]
  71:../../src/lcd_ram.h ****    return *this;
  72:../../src/lcd_ram.h **** }
  35              		.loc 1 72 0
  36              		@ sp needed
  37 0004 7047     		bx	lr
  38              		.cfi_endproc
  39              	.LFE1439:
  41              		.section	.text._ZN3LCD8set_lineEj,"ax",%progbits
  42              		.align	1
  43              		.global	_ZN3LCD8set_lineEj
  44              		.syntax unified
ARM GAS  /tmp/ccxildGF.s 			page 3


  45              		.code	16
  46              		.thumb_func
  47              		.fpu softvfp
  49              	_ZN3LCD8set_lineEj:
  50              	.LFB1440:
  73:../../src/lcd_ram.h **** 
  74:../../src/lcd_ram.h **** LCD& LCD::set_line(size_t string)
  75:../../src/lcd_ram.h **** {
  51              		.loc 1 75 0
  52              		.cfi_startproc
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55              		@ link register save eliminated.
  56              	.LVL1:
  76:../../src/lcd_ram.h ****    line = string;
  77:../../src/lcd_ram.h ****    position = line * 20;
  57              		.loc 1 77 0
  58 0000 1423     		movs	r3, #20
  76:../../src/lcd_ram.h ****    line = string;
  59              		.loc 1 76 0
  60 0002 0160     		str	r1, [r0]
  61              		.loc 1 77 0
  62 0004 5943     		muls	r1, r3
  63              	.LVL2:
  78:../../src/lcd_ram.h ****    return *this;
  79:../../src/lcd_ram.h **** }
  64              		.loc 1 79 0
  65              		@ sp needed
  77:../../src/lcd_ram.h ****    return *this;
  66              		.loc 1 77 0
  67 0006 8160     		str	r1, [r0, #8]
  68              		.loc 1 79 0
  69 0008 7047     		bx	lr
  70              		.cfi_endproc
  71              	.LFE1440:
  73              		.global	__aeabi_uidivmod
  74              		.section	.text._ZN3LCD10set_cursorEj,"ax",%progbits
  75              		.align	1
  76              		.global	_ZN3LCD10set_cursorEj
  77              		.syntax unified
  78              		.code	16
  79              		.thumb_func
  80              		.fpu softvfp
  82              	_ZN3LCD10set_cursorEj:
  83              	.LFB1441:
  80:../../src/lcd_ram.h **** 
  81:../../src/lcd_ram.h **** LCD& LCD::set_cursor(size_t cursor)
  82:../../src/lcd_ram.h **** {
  84              		.loc 1 82 0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              	.LVL3:
  89 0000 10B5     		push	{r4, lr}
  90              	.LCFI0:
  91              		.cfi_def_cfa_offset 8
  92              		.cfi_offset 4, -8
ARM GAS  /tmp/ccxildGF.s 			page 4


  93              		.cfi_offset 14, -4
  94              		.loc 1 82 0
  95 0002 0400     		movs	r4, r0
  83:../../src/lcd_ram.h ****    if      (line == 0) {
  96              		.loc 1 83 0
  97 0004 2368     		ldr	r3, [r4]
  82:../../src/lcd_ram.h ****    if      (line == 0) {
  98              		.loc 1 82 0
  99 0006 0800     		movs	r0, r1
 100              	.LVL4:
 101              		.loc 1 83 0
 102 0008 002B     		cmp	r3, #0
 103 000a 0AD1     		bne	.L4
  84:../../src/lcd_ram.h ****       if (cursor < 80)
 104              		.loc 1 84 0
 105 000c 4F29     		cmp	r1, #79
 106 000e 02D8     		bhi	.L5
 107              	.L12:
  85:../../src/lcd_ram.h ****          position = cursor;
  86:../../src/lcd_ram.h ****       else position = cursor - 80 - (cursor/80) * 80;
  87:../../src/lcd_ram.h ****    } else if (line == 1) {
  88:../../src/lcd_ram.h ****       if (cursor < 60)
  89:../../src/lcd_ram.h ****          position = cursor + 20;
 108              		.loc 1 89 0
 109 0010 A060     		str	r0, [r4, #8]
 110              	.LVL5:
 111              	.L6:
  90:../../src/lcd_ram.h ****       else position = cursor - 60 - (cursor/80) * 80;
  91:../../src/lcd_ram.h ****    } else if (line == 2) {
  92:../../src/lcd_ram.h ****       if (cursor < 40)
  93:../../src/lcd_ram.h ****          position = cursor + 40;
  94:../../src/lcd_ram.h ****       else position = cursor - 40 - (cursor/80) * 80;
  95:../../src/lcd_ram.h ****    } else if (line == 3) {
  96:../../src/lcd_ram.h ****       if (cursor < 20)
  97:../../src/lcd_ram.h ****          position = cursor + 60;
  98:../../src/lcd_ram.h ****       else position = cursor - 20 - (cursor/80) * 80;
  99:../../src/lcd_ram.h ****    }
 100:../../src/lcd_ram.h ****    
 101:../../src/lcd_ram.h ****    // position = line == 1 ? cursor :
 102:../../src/lcd_ram.h ****    //            line == 2 ? cursor + 20 :
 103:../../src/lcd_ram.h ****    //            line == 3 ? cursor + 40 : cursor + 60;
 104:../../src/lcd_ram.h ****    return *this;
 105:../../src/lcd_ram.h **** }...
 112              		.loc 1 105 0
 113 0012 2000     		movs	r0, r4
 114              		@ sp needed
 115              	.LVL6:
 116 0014 10BD     		pop	{r4, pc}
 117              	.LVL7:
 118              	.L5:
  86:../../src/lcd_ram.h ****       else position = cursor - 80 - (cursor/80) * 80;
 119              		.loc 1 86 0
 120 0016 5021     		movs	r1, #80
 121 0018 FFF7FEFF 		bl	__aeabi_uidivmod
 122              	.LVL8:
 123 001c 5039     		subs	r1, r1, #80
 124              	.L13:
ARM GAS  /tmp/ccxildGF.s 			page 5


  98:../../src/lcd_ram.h ****       else position = cursor - 20 - (cursor/80) * 80;
 125              		.loc 1 98 0
 126 001e A160     		str	r1, [r4, #8]
 127 0020 F7E7     		b	.L6
 128              	.LVL9:
 129              	.L4:
  87:../../src/lcd_ram.h ****    } else if (line == 1) {
 130              		.loc 1 87 0
 131 0022 012B     		cmp	r3, #1
 132 0024 08D1     		bne	.L7
  88:../../src/lcd_ram.h ****       if (cursor < 60)
 133              		.loc 1 88 0
 134 0026 3B29     		cmp	r1, #59
 135 0028 01D8     		bhi	.L8
  89:../../src/lcd_ram.h ****          position = cursor + 20;
 136              		.loc 1 89 0
 137 002a 1430     		adds	r0, r0, #20
 138              	.LVL10:
 139 002c F0E7     		b	.L12
 140              	.LVL11:
 141              	.L8:
  90:../../src/lcd_ram.h ****       else position = cursor - 60 - (cursor/80) * 80;
 142              		.loc 1 90 0
 143 002e 5021     		movs	r1, #80
 144 0030 FFF7FEFF 		bl	__aeabi_uidivmod
 145              	.LVL12:
 146 0034 3C39     		subs	r1, r1, #60
 147 0036 F2E7     		b	.L13
 148              	.LVL13:
 149              	.L7:
  91:../../src/lcd_ram.h ****    } else if (line == 2) {
 150              		.loc 1 91 0
 151 0038 022B     		cmp	r3, #2
 152 003a 08D1     		bne	.L9
  92:../../src/lcd_ram.h ****       if (cursor < 40)
 153              		.loc 1 92 0
 154 003c 2729     		cmp	r1, #39
 155 003e 01D8     		bhi	.L10
  93:../../src/lcd_ram.h ****          position = cursor + 40;
 156              		.loc 1 93 0
 157 0040 2830     		adds	r0, r0, #40
 158              	.LVL14:
 159 0042 E5E7     		b	.L12
 160              	.LVL15:
 161              	.L10:
  94:../../src/lcd_ram.h ****       else position = cursor - 40 - (cursor/80) * 80;
 162              		.loc 1 94 0
 163 0044 5021     		movs	r1, #80
 164 0046 FFF7FEFF 		bl	__aeabi_uidivmod
 165              	.LVL16:
 166 004a 2839     		subs	r1, r1, #40
 167 004c E7E7     		b	.L13
 168              	.LVL17:
 169              	.L9:
  95:../../src/lcd_ram.h ****    } else if (line == 3) {
 170              		.loc 1 95 0
 171 004e 032B     		cmp	r3, #3
ARM GAS  /tmp/ccxildGF.s 			page 6


 172 0050 DFD1     		bne	.L6
  96:../../src/lcd_ram.h ****       if (cursor < 20)
 173              		.loc 1 96 0
 174 0052 1329     		cmp	r1, #19
 175 0054 01D8     		bhi	.L11
  97:../../src/lcd_ram.h ****          position = cursor + 60;
 176              		.loc 1 97 0
 177 0056 3C30     		adds	r0, r0, #60
 178              	.LVL18:
 179 0058 DAE7     		b	.L12
 180              	.LVL19:
 181              	.L11:
  98:../../src/lcd_ram.h ****       else position = cursor - 20 - (cursor/80) * 80;
 182              		.loc 1 98 0
 183 005a 5021     		movs	r1, #80
 184 005c FFF7FEFF 		bl	__aeabi_uidivmod
 185              	.LVL20:
 186 0060 1439     		subs	r1, r1, #20
 187 0062 DCE7     		b	.L13
 188              		.cfi_endproc
 189              	.LFE1441:
 191              		.section	.text.init_clock,"ax",%progbits
 192              		.align	1
 193              		.global	init_clock
 194              		.syntax unified
 195              		.code	16
 196              		.thumb_func
 197              		.fpu softvfp
 199              	init_clock:
 200              	.LFB1442:
 201              		.file 2 "main.cpp"
   1:main.cpp      **** #define STM32F103xB
   2:main.cpp      **** #define F_OSC   8000000UL
   3:main.cpp      **** #define F_CPU   72000000UL
   4:main.cpp      **** // #include <iostream>
   5:main.cpp      **** #include "periph_rcc.h"
   6:main.cpp      **** #include "periph_flash.h"
   7:main.cpp      **** // #include "pin.h"
   8:main.cpp      **** // // #include "timers.h"
   9:main.cpp      **** // // #include "pwm.h"
  10:main.cpp      **** // #include "uart.h"
  11:main.cpp      **** // #include "fifo.h"
  12:main.cpp      **** // # include "modbus_slave.h"
  13:main.cpp      **** // #include "modbus_master.h"
  14:main.cpp      **** // #include "buttons.h"
  15:main.cpp      **** #include "lcd_ram.h"
  16:main.cpp      **** 
  17:main.cpp      **** 
  18:main.cpp      **** /// эта функция вызывается первой в startup файле
  19:main.cpp      **** extern "C" void init_clock ()
  20:main.cpp      **** {
 202              		.loc 2 20 0
 203              		.cfi_startproc
 204              		@ args = 0, pretend = 0, frame = 0
 205              		@ frame_needed = 0, uses_anonymous_args = 0
 206              		@ link register save eliminated.
 207              	.LBB134:
ARM GAS  /tmp/ccxildGF.s 			page 7


 208              	.LBB135:
 209              		.file 3 "../../src/periph/f1_flash.h"
   1:../../src/periph/f1_flash.h **** #pragma once
   2:../../src/periph/f1_flash.h **** 
   3:../../src/periph/f1_flash.h **** #include "f1_bits_flash.h"
   4:../../src/periph/f1_flash.h **** 
   5:../../src/periph/f1_flash.h **** namespace mcu {
   6:../../src/periph/f1_flash.h **** 
   7:../../src/periph/f1_flash.h **** class FLASH {
   8:../../src/periph/f1_flash.h ****    __IO FLASH_bits::ACR ACR;     // access control register,   offset: 0x00
   9:../../src/periph/f1_flash.h ****    __IO uint32_t        KEYR;    // key register,              offset: 0x04
  10:../../src/periph/f1_flash.h ****    __IO uint32_t        OPTKEYR; // option key register,       offset: 0x08
  11:../../src/periph/f1_flash.h ****    __IO uint32_t        SR;      // status register,           offset: 0x0C
  12:../../src/periph/f1_flash.h ****    __IO uint32_t        CR;      // control register,          offset: 0x10
  13:../../src/periph/f1_flash.h ****    __IO uint32_t        AR;      // Flash address register     offset: 0x14
  14:../../src/periph/f1_flash.h ****    __IO uint32_t        RESERVED;
  15:../../src/periph/f1_flash.h ****    __IO uint32_t        OBR;     // Option byte register       offset: 0x1C
  16:../../src/periph/f1_flash.h ****    __IO uint32_t        WRPR;    // Write protection register  offset: 0x20
  17:../../src/periph/f1_flash.h **** public:
  18:../../src/periph/f1_flash.h ****    using CMSIS_type = FLASH_TypeDef;
  19:../../src/periph/f1_flash.h ****    using Latency    = FLASH_bits::ACR::Latency;
  20:../../src/periph/f1_flash.h ****    // using ProgSize     = FLASH_bits::CR::ProgSize;
  21:../../src/periph/f1_flash.h ****    // using Sector       = FLASH_bits::CR::Sector;
  22:../../src/periph/f1_flash.h **** 
  23:../../src/periph/f1_flash.h ****    FLASH& set (Latency v)            { ACR.LATENCY = v;    return *this; }
  24:../../src/periph/f1_flash.h ****    FLASH& enable ()                  { ACR.PRFTBE = true;  return *this; }
 210              		.loc 3 24 0
 211 0000 1022     		movs	r2, #16
 212 0002 1F4B     		ldr	r3, .L21
 213 0004 1968     		ldr	r1, [r3]
 214 0006 0A43     		orrs	r2, r1
 215              	.LBE135:
 216              	.LBE134:
 217              	.LBB137:
 218              	.LBB138:
  23:../../src/periph/f1_flash.h ****    FLASH& enable ()                  { ACR.PRFTBE = true;  return *this; }
 219              		.loc 3 23 0
 220 0008 0721     		movs	r1, #7
 221              	.LBE138:
 222              	.LBE137:
 223              	.LBB140:
 224              	.LBB136:
 225              		.loc 3 24 0
 226 000a 1A60     		str	r2, [r3]
 227              	.LVL21:
 228              	.LBE136:
 229              	.LBE140:
 230              	.LBB141:
 231              	.LBB139:
  23:../../src/periph/f1_flash.h ****    FLASH& enable ()                  { ACR.PRFTBE = true;  return *this; }
 232              		.loc 3 23 0
 233 000c 1A68     		ldr	r2, [r3]
 234 000e 8A43     		bics	r2, r1
 235 0010 1100     		movs	r1, r2
 236 0012 0222     		movs	r2, #2
 237 0014 0A43     		orrs	r2, r1
 238 0016 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccxildGF.s 			page 8


 239              	.LVL22:
 240              	.LBE139:
 241              	.LBE141:
 242              	.LBB142:
 243              	.LBB143:
 244              		.file 4 "../../src/periph/f1_rcc.h"
   1:../../src/periph/f1_rcc.h **** #pragma once
   2:../../src/periph/f1_rcc.h **** 
   3:../../src/periph/f1_rcc.h **** #include "f1_bits_rcc.h"
   4:../../src/periph/f1_rcc.h **** 
   5:../../src/periph/f1_rcc.h **** namespace mcu {
   6:../../src/periph/f1_rcc.h **** 
   7:../../src/periph/f1_rcc.h **** class RCC {
   8:../../src/periph/f1_rcc.h ****    __IO RCC_bits::CR      CR;       // RCC clock control register,                offset: 0x00
   9:../../src/periph/f1_rcc.h ****    __IO RCC_bits::CFGR    CFGR;     // RCC clock configuration register,          offset: 0x04
  10:../../src/periph/f1_rcc.h ****    __IO uint32_t          CIR;      // RCC clock interrupt register,              offset: 0x08
  11:../../src/periph/f1_rcc.h ****    __IO uint32_t          APB2RSTR; // RCC APB2 peripheral reset register,        offset: 0x0C
  12:../../src/periph/f1_rcc.h ****    __IO uint32_t          APB1RSTR; // RCC APB1 peripheral reset register,        offset: 0x10
  13:../../src/periph/f1_rcc.h ****    __IO RCC_bits::AHBENR  AHBENR;   // RCC AHB peripheral clock register,         offset: 0x14
  14:../../src/periph/f1_rcc.h ****    __IO RCC_bits::APB2ENR APB2ENR;  // RCC APB2 peripheral clock enable register, offset: 0x18
  15:../../src/periph/f1_rcc.h ****    __IO RCC_bits::APB1ENR APB1ENR;  // RCC APB1 peripheral clock enable register, offset: 0x1C
  16:../../src/periph/f1_rcc.h ****    __IO uint32_t          BDCR;     // RCC Backup domain control register,        offset: 0x20
  17:../../src/periph/f1_rcc.h ****    __IO uint32_t          CSR;      // RCC clock control & status register,       offset: 0x24
  18:../../src/periph/f1_rcc.h **** 
  19:../../src/periph/f1_rcc.h **** public:
  20:../../src/periph/f1_rcc.h ****    using CMSIS_type    = RCC_TypeDef;
  21:../../src/periph/f1_rcc.h ****    using AHBprescaler  = RCC_bits::CFGR::AHBprescaler;
  22:../../src/periph/f1_rcc.h ****    using APBprescaler  = RCC_bits::CFGR::APBprescaler;
  23:../../src/periph/f1_rcc.h ****    using ADCprescaler  = RCC_bits::CFGR::ADCprescaler;
  24:../../src/periph/f1_rcc.h ****    using SystemClock   = RCC_bits::CFGR::SystemClock;
  25:../../src/periph/f1_rcc.h ****    using PLLsource     = RCC_bits::CFGR::PLLsource;
  26:../../src/periph/f1_rcc.h ****    using PLLmultiplier = RCC_bits::CFGR::PLLmultiplier;
  27:../../src/periph/f1_rcc.h **** 
  28:../../src/periph/f1_rcc.h ****    auto& like_CMSIS() { return *reinterpret_cast<CMSIS_type*>(this); }
  29:../../src/periph/f1_rcc.h **** 
  30:../../src/periph/f1_rcc.h ****    RCC& set       (AHBprescaler  v) { CFGR.HPRE   = v; return *this; } //
  31:../../src/periph/f1_rcc.h ****    RCC& set_APB1  (APBprescaler  v) { CFGR.PPRE1  = v; return *this; } //
  32:../../src/periph/f1_rcc.h ****    RCC& set_APB2  (APBprescaler  v) { CFGR.PPRE2  = v; return *this; } //
  33:../../src/periph/f1_rcc.h ****    // RCC& set       (ADCprescaler  v) { CFGR.ADCPRE = v; return *this; } // dont use yet
  34:../../src/periph/f1_rcc.h ****    RCC& set       (SystemClock   v) { CFGR.SW     = v; return *this; } //
  35:../../src/periph/f1_rcc.h ****    RCC& set       (PLLsource     v) { CFGR.PLLSRC = v; return *this; } //
  36:../../src/periph/f1_rcc.h ****    RCC& set       (PLLmultiplier v) { CFGR.PLLMUL = v; return *this; } //
  37:../../src/periph/f1_rcc.h **** 
  38:../../src/periph/f1_rcc.h ****    RCC& on_HSE        () { CR.HSEON = true;         return *this; }
 245              		.loc 4 38 0
 246 0018 8022     		movs	r2, #128
 247 001a 1A4B     		ldr	r3, .L21+4
 248 001c 5202     		lsls	r2, r2, #9
 249 001e 1968     		ldr	r1, [r3]
 250 0020 0A43     		orrs	r2, r1
 251 0022 1A60     		str	r2, [r3]
 252              	.L15:
 253              	.LBE143:
 254              	.LBE142:
 255              	.LBB144:
 256              	.LBB145:
  39:../../src/periph/f1_rcc.h ****    RCC& wait_HSE_ready() { while (not CR.HSERDY) {} return *this; }
ARM GAS  /tmp/ccxildGF.s 			page 9


 257              		.loc 4 39 0
 258 0024 1A68     		ldr	r2, [r3]
 259 0026 9203     		lsls	r2, r2, #14
 260 0028 FCD5     		bpl	.L15
 261              	.LVL23:
 262              	.LBE145:
 263              	.LBE144:
 264              	.LBB146:
 265              	.LBB147:
  30:../../src/periph/f1_rcc.h ****    RCC& set_APB1  (APBprescaler  v) { CFGR.PPRE1  = v; return *this; } //
 266              		.loc 4 30 0
 267 002a F021     		movs	r1, #240
 268 002c 5A68     		ldr	r2, [r3, #4]
 269 002e 8A43     		bics	r2, r1
 270 0030 5A60     		str	r2, [r3, #4]
 271              	.LVL24:
 272              	.LBE147:
 273              	.LBE146:
 274              	.LBB148:
 275              	.LBB149:
  31:../../src/periph/f1_rcc.h ****    RCC& set_APB2  (APBprescaler  v) { CFGR.PPRE2  = v; return *this; } //
 276              		.loc 4 31 0
 277 0032 5A68     		ldr	r2, [r3, #4]
 278 0034 1449     		ldr	r1, .L21+8
 279 0036 1140     		ands	r1, r2
 280 0038 8022     		movs	r2, #128
 281 003a D200     		lsls	r2, r2, #3
 282 003c 0A43     		orrs	r2, r1
 283 003e 5A60     		str	r2, [r3, #4]
 284              	.LVL25:
 285              	.LBE149:
 286              	.LBE148:
 287              	.LBB150:
 288              	.LBB151:
  32:../../src/periph/f1_rcc.h ****    // RCC& set       (ADCprescaler  v) { CFGR.ADCPRE = v; return *this; } // dont use yet
 289              		.loc 4 32 0
 290 0040 5A68     		ldr	r2, [r3, #4]
 291 0042 1249     		ldr	r1, .L21+12
 292 0044 0A40     		ands	r2, r1
 293 0046 5A60     		str	r2, [r3, #4]
 294              	.LVL26:
 295              	.LBE151:
 296              	.LBE150:
 297              	.LBB152:
 298              	.LBB153:
  35:../../src/periph/f1_rcc.h ****    RCC& set       (PLLmultiplier v) { CFGR.PLLMUL = v; return *this; } //
 299              		.loc 4 35 0
 300 0048 8022     		movs	r2, #128
 301 004a 5968     		ldr	r1, [r3, #4]
 302 004c 5202     		lsls	r2, r2, #9
 303 004e 0A43     		orrs	r2, r1
 304 0050 5A60     		str	r2, [r3, #4]
 305              	.LVL27:
 306              	.LBE153:
 307              	.LBE152:
 308              	.LBB154:
 309              	.LBB155:
ARM GAS  /tmp/ccxildGF.s 			page 10


  36:../../src/periph/f1_rcc.h **** 
 310              		.loc 4 36 0
 311 0052 5A68     		ldr	r2, [r3, #4]
 312 0054 0E49     		ldr	r1, .L21+16
 313 0056 1140     		ands	r1, r2
 314 0058 E022     		movs	r2, #224
 315 005a 5203     		lsls	r2, r2, #13
 316 005c 0A43     		orrs	r2, r1
 317 005e 5A60     		str	r2, [r3, #4]
 318              	.LVL28:
 319              	.LBE155:
 320              	.LBE154:
 321              	.LBB156:
 322              	.LBB157:
  40:../../src/periph/f1_rcc.h ****    RCC& on_PLL        () { CR.PLLON = true;         return *this; }
 323              		.loc 4 40 0
 324 0060 8022     		movs	r2, #128
 325 0062 1968     		ldr	r1, [r3]
 326 0064 5204     		lsls	r2, r2, #17
 327 0066 0A43     		orrs	r2, r1
 328 0068 1A60     		str	r2, [r3]
 329              	.L16:
 330              	.LBE157:
 331              	.LBE156:
 332              	.LBB158:
 333              	.LBB159:
  41:../../src/periph/f1_rcc.h ****    RCC& wait_PLL_ready() { while (not CR.PLLRDY) {} return *this; }
 334              		.loc 4 41 0
 335 006a 1A68     		ldr	r2, [r3]
 336 006c 9201     		lsls	r2, r2, #6
 337 006e FCD5     		bpl	.L16
 338              	.LVL29:
 339              	.LBE159:
 340              	.LBE158:
 341              	.LBB160:
 342              	.LBB161:
  34:../../src/periph/f1_rcc.h ****    RCC& set       (PLLsource     v) { CFGR.PLLSRC = v; return *this; } //
 343              		.loc 4 34 0
 344 0070 0321     		movs	r1, #3
 345 0072 5A68     		ldr	r2, [r3, #4]
 346              	.LBE161:
 347              	.LBE160:
  21:main.cpp      ****    mcu::make_reference<mcu::Periph::FLASH>()
  22:main.cpp      ****       .enable()
  23:main.cpp      ****       .set(mcu::FLASH::Latency::_48_72MHz);
  24:main.cpp      ****    
  25:main.cpp      **** 
  26:main.cpp      ****    mcu::make_reference<mcu::Periph::RCC>()
  27:main.cpp      ****       .on_HSE()
  28:main.cpp      ****       .wait_HSE_ready()
  29:main.cpp      ****       .set      (mcu::RCC::AHBprescaler::AHBnotdiv)
  30:main.cpp      ****       .set_APB1 (mcu::RCC::APBprescaler::APBdiv2)
  31:main.cpp      ****       .set_APB2 (mcu::RCC::APBprescaler::APBnotdiv)
  32:main.cpp      ****       .set      (mcu::RCC::PLLsource::HSE)
  33:main.cpp      ****       .set      (mcu::RCC::PLLmultiplier::_9)
  34:main.cpp      ****       .on_PLL()
  35:main.cpp      ****       .wait_PLL_ready()
ARM GAS  /tmp/ccxildGF.s 			page 11


  36:main.cpp      ****       .set      (mcu::RCC::SystemClock::CS_PLL);
  37:main.cpp      **** }
 348              		.loc 2 37 0
 349              		@ sp needed
 350              	.LBB163:
 351              	.LBB162:
  34:../../src/periph/f1_rcc.h ****    RCC& set       (PLLsource     v) { CFGR.PLLSRC = v; return *this; } //
 352              		.loc 4 34 0
 353 0074 8A43     		bics	r2, r1
 354 0076 1100     		movs	r1, r2
 355 0078 0222     		movs	r2, #2
 356 007a 0A43     		orrs	r2, r1
 357 007c 5A60     		str	r2, [r3, #4]
 358              	.LVL30:
 359              	.LBE162:
 360              	.LBE163:
 361              		.loc 2 37 0
 362 007e 7047     		bx	lr
 363              	.L22:
 364              		.align	2
 365              	.L21:
 366 0080 00200240 		.word	1073881088
 367 0084 00100240 		.word	1073876992
 368 0088 FFF8FFFF 		.word	-1793
 369 008c FFC7FFFF 		.word	-14337
 370 0090 FFFFC3FF 		.word	-3932161
 371              		.cfi_endproc
 372              	.LFE1442:
 374              		.section	.text.startup.main,"ax",%progbits
 375              		.align	1
 376              		.global	main
 377              		.syntax unified
 378              		.code	16
 379              		.thumb_func
 380              		.fpu softvfp
 382              	main:
 383              	.LFB1443:
  38:main.cpp      **** 
  39:main.cpp      ****   
  40:main.cpp      **** 
  41:main.cpp      **** int main()
  42:main.cpp      **** {
 384              		.loc 2 42 0
 385              		.cfi_startproc
 386              		@ args = 0, pretend = 0, frame = 0
 387              		@ frame_needed = 0, uses_anonymous_args = 0
 388              		@ link register save eliminated.
 389              	.LVL31:
  43:main.cpp      ****    LCD buffer;
  44:main.cpp      ****    // buffer << "He/llo world!";
  45:main.cpp      **** 
  46:main.cpp      **** }
 390              		.loc 2 46 0
 391 0000 0020     		movs	r0, #0
 392              		@ sp needed
 393 0002 7047     		bx	lr
 394              		.cfi_endproc
ARM GAS  /tmp/ccxildGF.s 			page 12


 395              	.LFE1443:
 397              		.section	.text._ZSt4copyIPKcPcET0_T_S4_S3_,"axG",%progbits,_ZSt4copyIPKcPcET0_T_S4_S3_,comdat
 398              		.align	1
 399              		.weak	_ZSt4copyIPKcPcET0_T_S4_S3_
 400              		.syntax unified
 401              		.code	16
 402              		.thumb_func
 403              		.fpu softvfp
 405              	_ZSt4copyIPKcPcET0_T_S4_S3_:
 406              	.LFB1679:
 407              		.file 5 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bi
   1:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
   3:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** // Copyright (C) 2001-2017 Free Software Foundation, Inc.
   4:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** //
   5:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** // any later version.
  10:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
  11:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
  16:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
  20:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
  25:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** /*
  26:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****  *
  27:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****  *
  30:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****  *
  38:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****  *
  39:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****  *
  42:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
ARM GAS  /tmp/ccxildGF.s 			page 13


  47:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****  */
  50:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
  51:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****  */
  55:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
  56:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
  59:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap and _GLIBCXX_MOVE
  71:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
  73:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  74:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** {
  75:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  76:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
  77:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
  78:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
  79:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
  80:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
  81:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   template<bool _BoolType>
  82:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     struct __iter_swap
  83:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     {
  84:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
  85:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****         static void
  86:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
  87:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****         {
  88:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****           typedef typename iterator_traits<_ForwardIterator1>::value_type
  89:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****             _ValueType1;
  90:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****           _ValueType1 __tmp = _GLIBCXX_MOVE(*__a);
  91:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****           *__a = _GLIBCXX_MOVE(*__b);
  92:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****           *__b = _GLIBCXX_MOVE(__tmp);
  93:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	}
  94:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     };
  95:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
  96:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   template<>
  97:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     struct __iter_swap<true>
  98:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     {
  99:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 100:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****         static void 
 101:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 102:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****         {
 103:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****           swap(*__a, *__b);
ARM GAS  /tmp/ccxildGF.s 			page 14


 104:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****         }
 105:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     };
 106:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** #endif
 107:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
 108:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   /**
 109:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 110:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 111:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 112:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 113:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @return   Nothing.
 114:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *
 115:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 116:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  iterators themselves.
 117:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   */
 118:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 119:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     inline void
 120:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 121:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     {
 122:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       // concept requirements
 123:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 124:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 125:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 126:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 127:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
 128:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 129:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 130:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	_ValueType1;
 131:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 132:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	_ValueType2;
 133:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
 134:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 135:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 				  _ValueType2>)
 136:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 137:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 				  _ValueType1>)
 138:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
 139:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 140:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	_ReferenceType1;
 141:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 142:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	_ReferenceType2;
 143:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 144:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 145:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 146:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 147:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** #else
 148:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       swap(*__a, *__b);
 149:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** #endif
 150:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     }
 151:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
 152:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   /**
 153:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 154:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 155:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 156:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 157:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 158:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 159:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *
 160:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
ARM GAS  /tmp/ccxildGF.s 			page 15


 161:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 162:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  The ranges must not overlap.
 163:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   */
 164:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 165:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     _ForwardIterator2
 166:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 167:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 168:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     {
 169:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       // concept requirements
 170:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 171:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 172:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 173:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 174:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 175:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
 176:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 177:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 178:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       return __first2;
 179:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     }
 180:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
 181:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   /**
 182:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 183:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 184:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 185:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 186:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 187:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *
 188:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 189:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 190:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 191:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   */
 192:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 193:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 194:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     inline const _Tp&
 195:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 196:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     {
 197:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       // concept requirements
 198:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 199:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 200:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       if (__b < __a)
 201:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	return __b;
 202:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       return __a;
 203:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     }
 204:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
 205:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   /**
 206:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 207:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 208:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 209:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 210:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 211:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *
 212:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 213:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 214:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 215:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   */
 216:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 217:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
ARM GAS  /tmp/ccxildGF.s 			page 16


 218:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     inline const _Tp&
 219:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 220:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     {
 221:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       // concept requirements
 222:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 223:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 224:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       if (__a < __b)
 225:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	return __b;
 226:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       return __a;
 227:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     }
 228:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
 229:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   /**
 230:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 231:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 232:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 233:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 234:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 235:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 236:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *
 237:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 238:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 239:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   */
 240:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 241:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 242:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     inline const _Tp&
 243:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b, _Compare __comp)
 244:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     {
 245:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       //return __comp(__b, __a) ? __b : __a;
 246:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       if (__comp(__b, __a))
 247:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	return __b;
 248:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       return __a;
 249:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     }
 250:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
 251:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   /**
 252:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 253:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 254:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 255:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 256:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 257:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 258:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *
 259:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 260:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 261:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   */
 262:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 263:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 264:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     inline const _Tp&
 265:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b, _Compare __comp)
 266:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     {
 267:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       //return __comp(__a, __b) ? __b : __a;
 268:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       if (__comp(__a, __b))
 269:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	return __b;
 270:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       return __a;
 271:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     }
 272:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
 273:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   // Fallback implementation of the function in bits/stl_iterator.h used to
 274:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   // remove the __normal_iterator wrapper. See copy, fill, ...
ARM GAS  /tmp/ccxildGF.s 			page 17


 275:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   template<typename _Iterator>
 276:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     inline _Iterator
 277:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     __niter_base(_Iterator __it)
 278:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     { return __it; }
 279:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
 280:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   // All of these auxiliary structs serve two purposes.  (1) Replace
 281:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,
 282:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   // because the input and output ranges are permitted to overlap.)
 283:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   // (2) If we're using random access iterators, then write the loop as
 284:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   // a for loop with an explicit count.
 285:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
 286:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   template<bool, bool, typename>
 287:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     struct __copy_move
 288:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     {
 289:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 290:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****         static _OI
 291:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 292:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****         {
 293:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 294:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	    *__result = *__first;
 295:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	  return __result;
 296:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	}
 297:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     };
 298:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
 299:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 300:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   template<typename _Category>
 301:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     struct __copy_move<true, false, _Category>
 302:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     {
 303:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 304:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****         static _OI
 305:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 306:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****         {
 307:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 308:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	    *__result = std::move(*__first);
 309:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	  return __result;
 310:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	}
 311:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     };
 312:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** #endif
 313:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
 314:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   template<>
 315:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     struct __copy_move<false, false, random_access_iterator_tag>
 316:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     {
 317:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 318:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****         static _OI
 319:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 320:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****         { 
 321:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 322:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 323:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	    {
 324:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	      *__result = *__first;
 325:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	      ++__first;
 326:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	      ++__result;
 327:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	    }
 328:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	  return __result;
 329:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	}
 330:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     };
 331:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
ARM GAS  /tmp/ccxildGF.s 			page 18


 332:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 333:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   template<>
 334:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     struct __copy_move<true, false, random_access_iterator_tag>
 335:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     {
 336:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 337:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****         static _OI
 338:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 339:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****         { 
 340:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 341:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 342:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	    {
 343:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	      *__result = std::move(*__first);
 344:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	      ++__first;
 345:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	      ++__result;
 346:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	    }
 347:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	  return __result;
 348:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	}
 349:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     };
 350:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** #endif
 351:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
 352:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   template<bool _IsMove>
 353:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     struct __copy_move<_IsMove, true, random_access_iterator_tag>
 354:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     {
 355:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       template<typename _Tp>
 356:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****         static _Tp*
 357:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****         __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 358:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****         {
 359:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 360:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	  using __assignable = conditional<_IsMove,
 361:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 					   is_move_assignable<_Tp>,
 362:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 					   is_copy_assignable<_Tp>>;
 363:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	  // trivial types can have deleted assignment
 364:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	  static_assert( __assignable::type::value, "type is not assignable" );
 365:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** #endif
 366:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 367:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	  if (_Num)
 368:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 369:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	  return __result + _Num;
 370:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	}
 371:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     };
 372:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
 373:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 374:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     inline _OI
 375:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     __copy_move_a(_II __first, _II __last, _OI __result)
 376:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     {
 377:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_II>::value_type _ValueTypeI;
 378:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
 379:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_II>::iterator_category _Category;
 380:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       const bool __simple = (__is_trivial(_ValueTypeI)
 381:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	                     && __is_pointer<_II>::__value
 382:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	                     && __is_pointer<_OI>::__value
 383:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
 384:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
 385:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       return std::__copy_move<_IsMove, __simple,
 386:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	                      _Category>::__copy_m(__first, __last, __result);
 387:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     }
 388:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
ARM GAS  /tmp/ccxildGF.s 			page 19


 389:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   // Helpers for streambuf iterators (either istream or ostream).
 390:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   // NB: avoid including <iosfwd>, relatively large.
 391:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   template<typename _CharT>
 392:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     struct char_traits;
 393:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
 394:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   template<typename _CharT, typename _Traits>
 395:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     class istreambuf_iterator;
 396:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
 397:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   template<typename _CharT, typename _Traits>
 398:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     class ostreambuf_iterator;
 399:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
 400:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 401:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, 
 402:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 403:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     __copy_move_a2(_CharT*, _CharT*,
 404:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 405:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
 406:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 407:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, 
 408:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 409:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     __copy_move_a2(const _CharT*, const _CharT*,
 410:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 411:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
 412:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 413:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 414:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 				    _CharT*>::__type
 415:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
 416:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);
 417:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
 418:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 419:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     inline _OI
 420:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     __copy_move_a2(_II __first, _II __last, _OI __result)
 421:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     {
 422:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 423:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 					     std::__niter_base(__last),
 424:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 					     std::__niter_base(__result)));
 425:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     }
 426:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
 427:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   /**
 428:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 429:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 430:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @param  __first  An input iterator.
 431:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @param  __last   An input iterator.
 432:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @param  __result An output iterator.
 433:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  @return   result + (first - last)
 434:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *
 435:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 436:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 437:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 438:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 439:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  [first,last); the copy_backward function should be used instead.
 440:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *
 441:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 442:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****    *  within [first,last).
 443:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   */
 444:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****   template<typename _II, typename _OI>
 445:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     inline _OI
ARM GAS  /tmp/ccxildGF.s 			page 20


 446:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     copy(_II __first, _II __last, _OI __result)
 408              		.loc 5 446 0
 409              		.cfi_startproc
 410              		@ args = 0, pretend = 0, frame = 0
 411              		@ frame_needed = 0, uses_anonymous_args = 0
 412              	.LVL32:
 413 0000 70B5     		push	{r4, r5, r6, lr}
 414              	.LCFI1:
 415              		.cfi_def_cfa_offset 16
 416              		.cfi_offset 4, -16
 417              		.cfi_offset 5, -12
 418              		.cfi_offset 6, -8
 419              		.cfi_offset 14, -4
 420              		.loc 5 446 0
 421 0002 1500     		movs	r5, r2
 422              	.LVL33:
 423              	.LBB184:
 424              	.LBB185:
 425              	.LBB186:
 426              	.LBB187:
 427              	.LBB188:
 366:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	  if (_Num)
 428              		.loc 5 366 0
 429 0004 0C1A     		subs	r4, r1, r0
 367:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 430              		.loc 5 367 0
 431 0006 04D0     		beq	.L25
 368:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	  return __result + _Num;
 432              		.loc 5 368 0
 433 0008 0100     		movs	r1, r0
 434              	.LVL34:
 435 000a 2200     		movs	r2, r4
 436              	.LVL35:
 437 000c 2800     		movs	r0, r5
 438              	.LVL36:
 439 000e FFF7FEFF 		bl	memmove
 440              	.LVL37:
 441              	.L25:
 369:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	}
 442              		.loc 5 369 0
 443 0012 2819     		adds	r0, r5, r4
 444              	.LBE188:
 445              	.LBE187:
 446              	.LBE186:
 447              	.LBE185:
 448              	.LBE184:
 447:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     {
 448:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       // concept requirements
 449:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 450:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 451:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 452:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 453:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 
 454:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****       return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
 455:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	      (std::__miter_base(__first), std::__miter_base(__last),
 456:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h **** 	       __result));
 457:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/stl_algobase.h ****     }
ARM GAS  /tmp/ccxildGF.s 			page 21


 449              		.loc 5 457 0
 450              		@ sp needed
 451              	.LVL38:
 452 0014 70BD     		pop	{r4, r5, r6, pc}
 453              		.cfi_endproc
 454              	.LFE1679:
 456              		.section	.text._ZN3LCDlsESt17basic_string_viewIcSt11char_traitsIcEE,"ax",%progbits
 457              		.align	1
 458              		.global	_ZN3LCDlsESt17basic_string_viewIcSt11char_traitsIcEE
 459              		.syntax unified
 460              		.code	16
 461              		.thumb_func
 462              		.fpu softvfp
 464              	_ZN3LCDlsESt17basic_string_viewIcSt11char_traitsIcEE:
 465              	.LFB1431:
  27:../../src/lcd_ram.h **** {
 466              		.loc 1 27 0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 16
 469              		@ frame_needed = 0, uses_anonymous_args = 0
 470              	.LVL39:
 471 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 472              	.LCFI2:
 473              		.cfi_def_cfa_offset 20
 474              		.cfi_offset 4, -20
 475              		.cfi_offset 5, -16
 476              		.cfi_offset 6, -12
 477              		.cfi_offset 7, -8
 478              		.cfi_offset 14, -4
 479 0002 0700     		movs	r7, r0
 480              	.LBB189:
  30:../../src/lcd_ram.h ****    if (centre){
 481              		.loc 1 30 0
 482 0004 037B     		ldrb	r3, [r0, #12]
 483              	.LBE189:
  27:../../src/lcd_ram.h **** {
 484              		.loc 1 27 0
 485 0006 85B0     		sub	sp, sp, #20
 486              	.LCFI3:
 487              		.cfi_def_cfa_offset 40
  27:../../src/lcd_ram.h **** {
 488              		.loc 1 27 0
 489 0008 0600     		movs	r6, r0
 490 000a 0C00     		movs	r4, r1
 491              	.LVL40:
 492 000c 1500     		movs	r5, r2
 493              	.LVL41:
 494 000e 0D37     		adds	r7, r7, #13
 495              	.LBB198:
  30:../../src/lcd_ram.h ****    if (centre){
 496              		.loc 1 30 0
 497 0010 002B     		cmp	r3, #0
 498 0012 18D0     		beq	.L30
 499 0014 1422     		movs	r2, #20
 500 0016 0168     		ldr	r1, [r0]
 501 0018 5143     		muls	r1, r2
 502              	.LBB190:
ARM GAS  /tmp/ccxildGF.s 			page 22


  31:../../src/lcd_ram.h ****       if (rest_string < 20) {
 503              		.loc 1 31 0
 504 001a 132C     		cmp	r4, #19
 505 001c 0AD8     		bhi	.L31
 506              	.LVL42:
 507              	.LBB191:
  33:../../src/lcd_ram.h ****          std::copy(string.begin(), string.end(), screen.begin() + (line*20 + pos));
 508              		.loc 1 33 0
 509 001e 2800     		movs	r0, r5
 510              	.LVL43:
  32:../../src/lcd_ram.h ****          size_t pos = (20 - rest_string)/2;
 511              		.loc 1 32 0
 512 0020 121B     		subs	r2, r2, r4
 513 0022 5208     		lsrs	r2, r2, #1
  33:../../src/lcd_ram.h ****          std::copy(string.begin(), string.end(), screen.begin() + (line*20 + pos));
 514              		.loc 1 33 0
 515 0024 5218     		adds	r2, r2, r1
 516 0026 BA18     		adds	r2, r7, r2
 517              	.LBB192:
 518              	.LBB193:
 519              		.file 6 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/st
   1:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** // Components for manipulating non-owning sequences of characters -*- C++ -*-
   2:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** 
   3:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** // Copyright (C) 2013-2017 Free Software Foundation, Inc.
   4:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** //
   5:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** // software; you can redistribute it and/or modify it under the
   7:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** // terms of the GNU General Public License as published by the
   8:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** // Free Software Foundation; either version 3, or (at your option)
   9:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** // any later version.
  10:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** 
  11:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** // This library is distributed in the hope that it will be useful,
  12:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** // GNU General Public License for more details.
  15:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** 
  16:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** // Under Section 7 of GPL version 3, you are granted additional
  17:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** // permissions described in the GCC Runtime Library Exception, version
  18:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** // 3.1, as published by the Free Software Foundation.
  19:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** 
  20:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** // You should have received a copy of the GNU General Public License and
  21:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** // <http://www.gnu.org/licenses/>.
  24:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** 
  25:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** /** @file string_view
  26:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****  *  This is a Standard C++ Library header.
  27:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****  */
  28:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** 
  29:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** //
  30:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** // N3762 basic_string_view library
  31:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** //
  32:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** 
  33:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** #ifndef _GLIBCXX_STRING_VIEW
  34:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** #define _GLIBCXX_STRING_VIEW 1
  35:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** 
  36:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** #pragma GCC system_header
ARM GAS  /tmp/ccxildGF.s 			page 23


  37:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** 
  38:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** #if __cplusplus >= 201703L
  39:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** 
  40:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** #include <limits>
  41:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** #include <iosfwd>
  42:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** #include <bits/char_traits.h>
  43:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** #include <bits/functional_hash.h>
  44:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** #include <bits/range_access.h>
  45:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** 
  46:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** namespace std _GLIBCXX_VISIBILITY(default)
  47:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** {
  48:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  49:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** 
  50:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** #define __cpp_lib_string_view 201603
  51:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** 
  52:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****   /**
  53:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****    *  @class basic_string_view <string_view>
  54:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****    *  @brief  A non-owning reference to a string.
  55:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****    *
  56:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****    *  @ingroup strings
  57:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****    *  @ingroup sequences
  58:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****    *
  59:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****    *  @tparam _CharT  Type of character
  60:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****    *  @tparam _Traits  Traits for character type, defaults to
  61:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****    *                   char_traits<_CharT>.
  62:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****    *
  63:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****    *  A basic_string_view looks like this:
  64:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****    *
  65:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****    *  @code
  66:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****    *    _CharT*    _M_str
  67:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****    *    size_t     _M_len
  68:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****    *  @endcode
  69:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****    */
  70:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****   template<typename _CharT, typename _Traits = std::char_traits<_CharT>>
  71:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****     class basic_string_view
  72:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****     {
  73:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****     public:
  74:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** 
  75:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       // types
  76:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       using traits_type = _Traits;
  77:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       using value_type = _CharT;
  78:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       using pointer = const _CharT*;
  79:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       using const_pointer = const _CharT*;
  80:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       using reference = const _CharT&;
  81:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       using const_reference = const _CharT&;
  82:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       using const_iterator = const _CharT*;
  83:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       using iterator = const_iterator;
  84:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       using const_reverse_iterator = std::reverse_iterator<const_iterator>;
  85:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       using reverse_iterator = const_reverse_iterator;
  86:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       using size_type = size_t;
  87:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       using difference_type = ptrdiff_t;
  88:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       static constexpr size_type npos = size_type(-1);
  89:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** 
  90:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       // [string.view.cons], construct/copy
  91:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** 
  92:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       constexpr
  93:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       basic_string_view() noexcept
ARM GAS  /tmp/ccxildGF.s 			page 24


  94:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       : _M_len{0}, _M_str{nullptr}
  95:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       { }
  96:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** 
  97:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       constexpr basic_string_view(const basic_string_view&) noexcept = default;
  98:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** 
  99:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       constexpr basic_string_view(const _CharT* __str)
 100:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       : _M_len{__str == nullptr ? 0 : traits_type::length(__str)},
 101:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** 	_M_str{__str}
 102:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       { }
 103:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** 
 104:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       constexpr basic_string_view(const _CharT* __str, size_type __len)
 105:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       : _M_len{__len},
 106:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****         _M_str{__str}
 107:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       { }
 108:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** 
 109:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       constexpr basic_string_view&
 110:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       operator=(const basic_string_view&) noexcept = default;
 111:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** 
 112:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       // [string.view.iterators], iterators
 113:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** 
 114:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       constexpr const_iterator
 115:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       begin() const noexcept
 116:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       { return this->_M_str; }
 117:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view **** 
 118:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       constexpr const_iterator
 119:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       end() const noexcept
 120:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/string_view ****       { return this->_M_str + this->_M_len; }
 520              		.loc 6 120 0
 521 0028 2919     		adds	r1, r5, r4
 522              	.LVL44:
 523              	.L36:
 524              	.LBE193:
 525              	.LBE192:
 526              	.LBE191:
  35:../../src/lcd_ram.h ****          std::copy(string.begin() + (rest_string - 20)/2, string.begin() + (rest_string - 20)/2 + 2
 527              		.loc 1 35 0
 528 002a FFF7FEFF 		bl	_ZSt4copyIPKcPcET0_T_S4_S3_
 529              	.LVL45:
 530              	.L32:
 531              	.LBE190:
 532              	.LBE198:
  56:../../src/lcd_ram.h **** }
 533              		.loc 1 56 0
 534 002e 3000     		movs	r0, r6
 535 0030 05B0     		add	sp, sp, #20
 536              		@ sp needed
 537              	.LVL46:
 538 0032 F0BD     		pop	{r4, r5, r6, r7, pc}
 539              	.L31:
 540              	.LVL47:
 541              	.LBB199:
 542              	.LBB194:
  35:../../src/lcd_ram.h ****          std::copy(string.begin() + (rest_string - 20)/2, string.begin() + (rest_string - 20)/2 + 2
 543              		.loc 1 35 0
 544 0034 2000     		movs	r0, r4
 545              	.LVL48:
 546 0036 1438     		subs	r0, r0, #20
ARM GAS  /tmp/ccxildGF.s 			page 25


 547 0038 4008     		lsrs	r0, r0, #1
 548              	.LVL49:
 549 003a 7A18     		adds	r2, r7, r1
 550 003c 0100     		movs	r1, r0
 551 003e 1431     		adds	r1, r1, #20
 552 0040 6918     		adds	r1, r5, r1
 553 0042 2818     		adds	r0, r5, r0
 554 0044 F1E7     		b	.L36
 555              	.LVL50:
 556              	.L30:
 557              	.LBE194:
 558              	.LBB195:
  38:../../src/lcd_ram.h ****       if (rest_string < screen_size - position) {
 559              		.loc 1 38 0
 560 0046 5021     		movs	r1, #80
 561 0048 8268     		ldr	r2, [r0, #8]
 562 004a 2B19     		adds	r3, r5, r4
 563 004c 891A     		subs	r1, r1, r2
 564 004e 0193     		str	r3, [sp, #4]
 565 0050 BA18     		adds	r2, r7, r2
 566 0052 8C42     		cmp	r4, r1
 567 0054 07D2     		bcs	.L33
 568              	.LVL51:
  39:../../src/lcd_ram.h ****          std::copy(string.begin(), string.end(), screen.begin() + position);
 569              		.loc 1 39 0
 570 0056 1900     		movs	r1, r3
 571 0058 2800     		movs	r0, r5
 572              	.LVL52:
 573 005a FFF7FEFF 		bl	_ZSt4copyIPKcPcET0_T_S4_S3_
 574              	.LVL53:
  40:../../src/lcd_ram.h ****          position += rest_string;
 575              		.loc 1 40 0
 576 005e B368     		ldr	r3, [r6, #8]
 577 0060 1C19     		adds	r4, r3, r4
 578 0062 B460     		str	r4, [r6, #8]
 579 0064 E3E7     		b	.L32
 580              	.LVL54:
 581              	.L33:
 582              	.LBB196:
  42:../../src/lcd_ram.h ****          std::copy(string.begin(), string.begin() + (screen_size - position), screen.begin() + posi
 583              		.loc 1 42 0
 584 0066 6918     		adds	r1, r5, r1
 585 0068 2800     		movs	r0, r5
 586              	.LVL55:
 587 006a FFF7FEFF 		bl	_ZSt4copyIPKcPcET0_T_S4_S3_
 588              	.LVL56:
  43:../../src/lcd_ram.h ****          rest_string -= (screen_size - position);
 589              		.loc 1 43 0
 590 006e 2300     		movs	r3, r4
 591 0070 B268     		ldr	r2, [r6, #8]
 592 0072 503B     		subs	r3, r3, #80
 593 0074 9B18     		adds	r3, r3, r2
 594 0076 E41A     		subs	r4, r4, r3
 595 0078 0093     		str	r3, [sp]
 596              	.LVL57:
 597 007a 2D19     		adds	r5, r5, r4
 598              	.L35:
ARM GAS  /tmp/ccxildGF.s 			page 26


 599              	.LVL58:
  44:../../src/lcd_ram.h ****          while (rest_string > screen_size) {
 600              		.loc 1 44 0
 601 007c 009B     		ldr	r3, [sp]
 602 007e 2800     		movs	r0, r5
  50:../../src/lcd_ram.h ****          std::copy(string.begin() + (string.size() - rest_string), string.end(), screen.begin());
 603              		.loc 1 50 0
 604 0080 3A00     		movs	r2, r7
 605 0082 5035     		adds	r5, r5, #80
  44:../../src/lcd_ram.h ****          while (rest_string > screen_size) {
 606              		.loc 1 44 0
 607 0084 502B     		cmp	r3, #80
 608 0086 06D9     		bls	.L34
 609              	.LVL59:
 610              	.LBB197:
  47:../../src/lcd_ram.h ****             std::copy(string_begin, string_end, screen.begin());
 611              		.loc 1 47 0
 612 0088 2900     		movs	r1, r5
 613 008a FFF7FEFF 		bl	_ZSt4copyIPKcPcET0_T_S4_S3_
 614              	.LVL60:
  48:../../src/lcd_ram.h ****             rest_string -= screen_size;
 615              		.loc 1 48 0
 616 008e 009B     		ldr	r3, [sp]
 617 0090 503B     		subs	r3, r3, #80
 618 0092 0093     		str	r3, [sp]
 619              	.LVL61:
 620              	.LBE197:
  44:../../src/lcd_ram.h ****          while (rest_string > screen_size) {
 621              		.loc 1 44 0
 622 0094 F2E7     		b	.L35
 623              	.LVL62:
 624              	.L34:
  50:../../src/lcd_ram.h ****          std::copy(string.begin() + (string.size() - rest_string), string.end(), screen.begin());
 625              		.loc 1 50 0
 626 0096 0199     		ldr	r1, [sp, #4]
 627 0098 FFF7FEFF 		bl	_ZSt4copyIPKcPcET0_T_S4_S3_
 628              	.LVL63:
  51:../../src/lcd_ram.h ****          position += rest_string;
 629              		.loc 1 51 0
 630 009c B268     		ldr	r2, [r6, #8]
 631 009e 009B     		ldr	r3, [sp]
 632 00a0 9446     		mov	ip, r2
 633 00a2 6344     		add	r3, r3, ip
 634 00a4 B360     		str	r3, [r6, #8]
 635 00a6 C2E7     		b	.L32
 636              	.LBE196:
 637              	.LBE195:
 638              	.LBE199:
 639              		.cfi_endproc
 640              	.LFE1431:
 642              		.section	.text._ZN3LCDlsEj,"ax",%progbits
 643              		.align	1
 644              		.global	_ZN3LCDlsEj
 645              		.syntax unified
 646              		.code	16
 647              		.thumb_func
 648              		.fpu softvfp
ARM GAS  /tmp/ccxildGF.s 			page 27


 650              	_ZN3LCDlsEj:
 651              	.LFB1435:
  59:../../src/lcd_ram.h **** {
 652              		.loc 1 59 0
 653              		.cfi_startproc
 654              		@ args = 0, pretend = 0, frame = 24
 655              		@ frame_needed = 0, uses_anonymous_args = 0
 656              	.LVL64:
 657 0000 10B5     		push	{r4, lr}
 658              	.LCFI4:
 659              		.cfi_def_cfa_offset 8
 660              		.cfi_offset 4, -8
 661              		.cfi_offset 14, -4
 662 0002 86B0     		sub	sp, sp, #24
 663              	.LCFI5:
 664              		.cfi_def_cfa_offset 32
  59:../../src/lcd_ram.h **** {
 665              		.loc 1 59 0
 666 0004 0B00     		movs	r3, r1
 667 0006 0400     		movs	r4, r0
  61:../../src/lcd_ram.h ****    snprintf(ch, sizeof(ch), "%d", number);
 668              		.loc 1 61 0
 669 0008 074A     		ldr	r2, .L38
 670 000a 0A21     		movs	r1, #10
 671              	.LVL65:
 672 000c 03A8     		add	r0, sp, #12
 673              	.LVL66:
 674 000e FFF7FEFF 		bl	snprintf
 675              	.LVL67:
 676              	.LBB211:
 677              	.LBB212:
 678              	.LBB213:
 679              	.LBB214:
 680              	.LBB215:
 681              		.file 7 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bi
   1:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** // Character Traits for use by standard string and iostream -*- C++ -*-
   2:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
   3:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** // Copyright (C) 1997-2017 Free Software Foundation, Inc.
   4:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** //
   5:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** // terms of the GNU General Public License as published by the
   8:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** // any later version.
  10:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
  11:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** // GNU General Public License for more details.
  15:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
  16:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
  20:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
ARM GAS  /tmp/ccxildGF.s 			page 28


  23:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
  25:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** /** @file bits/char_traits.h
  26:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****  *  This is an internal header file, included by other library headers.
  27:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****  *  Do not attempt to use it directly. @headername{string}
  28:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****  */
  29:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
  30:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** //
  31:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** // ISO C++ 14882: 21  Strings library
  32:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** //
  33:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
  34:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** #ifndef _CHAR_TRAITS_H
  35:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** #define _CHAR_TRAITS_H 1
  36:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
  37:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** #pragma GCC system_header
  38:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
  39:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** #include <bits/stl_algobase.h>  // std::copy, std::fill_n
  40:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** #include <bits/postypes.h>      // For streampos
  41:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** #include <cwchar>               // For WEOF, wmemmove, wmemset, etc.
  42:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
  43:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** #ifndef _GLIBCXX_ALWAYS_INLINE
  44:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** #define _GLIBCXX_ALWAYS_INLINE inline __attribute__((__always_inline__))
  45:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** #endif
  46:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
  47:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  48:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** {
  49:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  50:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
  51:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****   /**
  52:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  @brief  Mapping from character type to associated types.
  53:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *
  54:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  @note This is an implementation class for the generic version
  55:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  of char_traits.  It defines int_type, off_type, pos_type, and
  56:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  state_type.  By default these are unsigned long, streamoff,
  57:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  streampos, and mbstate_t.  Users who need a different set of
  58:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  types, but who don't need to change the definitions of any function
  59:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  defined in char_traits, can specialize __gnu_cxx::_Char_types
  60:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  while leaving __gnu_cxx::char_traits alone. */
  61:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****   template<typename _CharT>
  62:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     struct _Char_types
  63:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     {
  64:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       typedef unsigned long   int_type;
  65:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       typedef std::streampos  pos_type;
  66:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       typedef std::streamoff  off_type;
  67:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       typedef std::mbstate_t  state_type;
  68:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     };
  69:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
  70:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
  71:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****   /**
  72:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  @brief  Base class used to implement std::char_traits.
  73:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *
  74:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  @note For any given actual character type, this definition is
  75:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  probably wrong.  (Most of the member functions are likely to be
  76:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  right, but the int_type and state_type typedefs, and the eof()
  77:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  member function, are likely to be wrong.)  The reason this class
  78:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  exists is so users can specialize it.  Classes in namespace std
  79:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  may not be specialized for fundamental types, but classes in
ARM GAS  /tmp/ccxildGF.s 			page 29


  80:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  namespace __gnu_cxx may be.
  81:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *
  82:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/strings.html#strings.string.character_typ
  83:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  for advice on how to make use of this class for @a unusual character
  84:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  types. Also, check out include/ext/pod_char_traits.h.  
  85:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    */
  86:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****   template<typename _CharT>
  87:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     struct char_traits
  88:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     {
  89:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       typedef _CharT                                    char_type;
  90:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::int_type    int_type;
  91:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::pos_type    pos_type;
  92:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::off_type    off_type;
  93:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::state_type  state_type;
  94:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
  95:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR void
  96:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       assign(char_type& __c1, const char_type& __c2)
  97:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       { __c1 = __c2; }
  98:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
  99:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 100:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       eq(const char_type& __c1, const char_type& __c2)
 101:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       { return __c1 == __c2; }
 102:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
 103:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 104:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       lt(const char_type& __c1, const char_type& __c2)
 105:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       { return __c1 < __c2; }
 106:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
 107:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR int
 108:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       compare(const char_type* __s1, const char_type* __s2, std::size_t __n);
 109:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
 110:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR std::size_t
 111:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       length(const char_type* __s);
 112:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
 113:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR const char_type*
 114:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       find(const char_type* __s, std::size_t __n, const char_type& __a);
 115:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
 116:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       static char_type*
 117:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       move(char_type* __s1, const char_type* __s2, std::size_t __n);
 118:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
 119:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       static char_type*
 120:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       copy(char_type* __s1, const char_type* __s2, std::size_t __n);
 121:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
 122:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       static char_type*
 123:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       assign(char_type* __s, std::size_t __n, char_type __a);
 124:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
 125:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR char_type
 126:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       to_char_type(const int_type& __c)
 127:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       { return static_cast<char_type>(__c); }
 128:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
 129:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 130:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       to_int_type(const char_type& __c)
 131:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       { return static_cast<int_type>(__c); }
 132:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
 133:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 134:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       eq_int_type(const int_type& __c1, const int_type& __c2)
 135:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       { return __c1 == __c2; }
 136:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
ARM GAS  /tmp/ccxildGF.s 			page 30


 137:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 138:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       eof()
 139:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       { return static_cast<int_type>(_GLIBCXX_STDIO_EOF); }
 140:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
 141:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 142:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       not_eof(const int_type& __c)
 143:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
 144:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     };
 145:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
 146:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****   template<typename _CharT>
 147:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     _GLIBCXX14_CONSTEXPR int
 148:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     char_traits<_CharT>::
 149:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
 150:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     {
 151:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       for (std::size_t __i = 0; __i < __n; ++__i)
 152:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 	if (lt(__s1[__i], __s2[__i]))
 153:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 	  return -1;
 154:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 	else if (lt(__s2[__i], __s1[__i]))
 155:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 	  return 1;
 156:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       return 0;
 157:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     }
 158:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
 159:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****   template<typename _CharT>
 160:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     _GLIBCXX14_CONSTEXPR std::size_t
 161:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     char_traits<_CharT>::
 162:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     length(const char_type* __p)
 163:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     {
 164:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       std::size_t __i = 0;
 165:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       while (!eq(__p[__i], char_type()))
 166:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****         ++__i;
 167:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       return __i;
 168:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     }
 169:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
 170:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****   template<typename _CharT>
 171:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     _GLIBCXX14_CONSTEXPR const typename char_traits<_CharT>::char_type*
 172:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     char_traits<_CharT>::
 173:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     find(const char_type* __s, std::size_t __n, const char_type& __a)
 174:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     {
 175:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       for (std::size_t __i = 0; __i < __n; ++__i)
 176:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****         if (eq(__s[__i], __a))
 177:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****           return __s + __i;
 178:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       return 0;
 179:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     }
 180:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
 181:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****   template<typename _CharT>
 182:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 183:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     char_traits<_CharT>::
 184:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     move(char_type* __s1, const char_type* __s2, std::size_t __n)
 185:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     {
 186:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
 187:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 						    __n * sizeof(char_type)));
 188:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     }
 189:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
 190:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****   template<typename _CharT>
 191:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 192:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     char_traits<_CharT>::
 193:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     copy(char_type* __s1, const char_type* __s2, std::size_t __n)
ARM GAS  /tmp/ccxildGF.s 			page 31


 194:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     {
 195:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       // NB: Inline std::copy so no recursive dependencies.
 196:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       std::copy(__s2, __s2 + __n, __s1);
 197:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       return __s1;
 198:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     }
 199:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
 200:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****   template<typename _CharT>
 201:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 202:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     char_traits<_CharT>::
 203:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     assign(char_type* __s, std::size_t __n, char_type __a)
 204:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     {
 205:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       // NB: Inline std::fill_n so no recursive dependencies.
 206:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       std::fill_n(__s, __n, __a);
 207:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       return __s;
 208:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     }
 209:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
 210:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** _GLIBCXX_END_NAMESPACE_VERSION
 211:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** } // namespace
 212:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
 213:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
 214:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** {
 215:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 216:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
 217:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** #if __cplusplus > 201402
 218:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** #define __cpp_lib_constexpr_char_traits 201611
 219:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
 220:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****   /**
 221:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  @brief Determine whether the characters of a NULL-terminated
 222:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  string are known at compile time.
 223:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  @param  __s  The string.
 224:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *
 225:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  Assumes that _CharT is a built-in character type.
 226:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    */
 227:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****   template<typename _CharT>
 228:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     static _GLIBCXX_ALWAYS_INLINE constexpr bool
 229:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     __constant_string_p(const _CharT* __s)
 230:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     {
 231:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       while (__builtin_constant_p(*__s) && *__s)
 232:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 	__s++;
 233:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       return __builtin_constant_p(*__s);
 234:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     }
 235:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
 236:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****   /**
 237:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  @brief Determine whether the characters of a character array are
 238:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  known at compile time.
 239:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  @param  __a  The character array.
 240:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  @param  __n  Number of characters.
 241:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *
 242:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  Assumes that _CharT is a built-in character type.
 243:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    */
 244:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****   template<typename _CharT>
 245:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     static _GLIBCXX_ALWAYS_INLINE constexpr bool
 246:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     __constant_char_array_p(const _CharT* __a, size_t __n)
 247:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     {
 248:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       size_t __i = 0;
 249:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       while (__builtin_constant_p(__a[__i]) && __i < __n)
 250:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 	__i++;
ARM GAS  /tmp/ccxildGF.s 			page 32


 251:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       return __i == __n;
 252:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     }
 253:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** #endif
 254:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
 255:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****   // 21.1
 256:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****   /**
 257:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  @brief  Basis for explicit traits specializations.
 258:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *
 259:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  @note  For any given actual character type, this definition is
 260:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  probably wrong.  Since this is just a thin wrapper around
 261:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  __gnu_cxx::char_traits, it is possible to achieve a more
 262:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  appropriate definition by specializing __gnu_cxx::char_traits.
 263:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *
 264:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/strings.html#strings.string.character_typ
 265:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  for advice on how to make use of this class for @a unusual character
 266:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****    *  types. Also, check out include/ext/pod_char_traits.h.
 267:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****   */
 268:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****   template<class _CharT>
 269:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     struct char_traits : public __gnu_cxx::char_traits<_CharT>
 270:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     { };
 271:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
 272:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
 273:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****   /// 21.1.3.1  char_traits specializations
 274:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****   template<>
 275:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     struct char_traits<char>
 276:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****     {
 277:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       typedef char              char_type;
 278:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       typedef int               int_type;
 279:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       typedef streampos         pos_type;
 280:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       typedef streamoff         off_type;
 281:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       typedef mbstate_t         state_type;
 282:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
 283:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR void
 284:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 285:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 286:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
 287:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 288:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 289:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       { return __c1 == __c2; }
 290:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
 291:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 292:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 293:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       {
 294:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 	// LWG 467.
 295:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 	return (static_cast<unsigned char>(__c1)
 296:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 		< static_cast<unsigned char>(__c2));
 297:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       }
 298:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
 299:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR int
 300:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       compare(const char_type* __s1, const char_type* __s2, size_t __n)
 301:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       {
 302:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** #if __cplusplus > 201402
 303:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 	if (__builtin_constant_p(__n)
 304:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 	    && __constant_char_array_p(__s1, __n)
 305:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 	    && __constant_char_array_p(__s2, __n))
 306:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 	  return __gnu_cxx::char_traits<char_type>::compare(__s1, __s2, __n);
 307:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** #endif
ARM GAS  /tmp/ccxildGF.s 			page 33


 308:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 	if (__n == 0)
 309:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 	  return 0;
 310:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 	return __builtin_memcmp(__s1, __s2, __n);
 311:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       }
 312:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 
 313:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR size_t
 314:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       length(const char_type* __s)
 315:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h ****       {
 316:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** #if __cplusplus > 201402
 317:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 	if (__constant_string_p(__s))
 318:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 	  return __gnu_cxx::char_traits<char_type>::length(__s);
 319:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** #endif
 320:/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/bits/char_traits.h **** 	return __builtin_strlen(__s);
 682              		.loc 7 320 0
 683 0012 03A8     		add	r0, sp, #12
 684              	.LVL68:
 685 0014 FFF7FEFF 		bl	strlen
 686              	.LVL69:
 687              	.LBE215:
 688              	.LBE214:
 689              	.LBE213:
 690              	.LBE212:
 691              	.LBE211:
  64:../../src/lcd_ram.h ****    *this << ch;
 692              		.loc 1 64 0
 693 0018 03AA     		add	r2, sp, #12
 694              	.LVL70:
 695              	.LBB220:
 696              	.LBB219:
 697              	.LBB218:
 698              	.LBB217:
 699              	.LBB216:
 700              		.loc 7 320 0
 701 001a 0100     		movs	r1, r0
 702              	.LVL71:
 703              	.LBE216:
 704              	.LBE217:
 705              	.LBE218:
 706              	.LBE219:
 707              	.LBE220:
  64:../../src/lcd_ram.h ****    *this << ch;
 708              		.loc 1 64 0
 709 001c 2000     		movs	r0, r4
 710 001e FFF7FEFF 		bl	_ZN3LCDlsESt17basic_string_viewIcSt11char_traitsIcEE
 711              	.LVL72:
  66:../../src/lcd_ram.h **** }
 712              		.loc 1 66 0
 713 0022 2000     		movs	r0, r4
 714 0024 06B0     		add	sp, sp, #24
 715              		@ sp needed
 716              	.LVL73:
 717 0026 10BD     		pop	{r4, pc}
 718              	.L39:
 719              		.align	2
 720              	.L38:
 721 0028 00000000 		.word	.LC0
 722              		.cfi_endproc
ARM GAS  /tmp/ccxildGF.s 			page 34


 723              	.LFE1435:
 725              		.section	.rodata._ZN3LCDlsEj.str1.1,"aMS",%progbits,1
 726              	.LC0:
 727 0000 256400   		.ascii	"%d\000"
 728              		.text
 729              	.Letext0:
 730              		.file 8 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/ty
 731              		.file 9 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/ar
 732              		.file 10 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/c
 733              		.file 11 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/c
 734              		.file 12 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/b
 735              		.file 13 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/u
 736              		.file 14 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/n
 737              		.file 15 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/b
 738              		.file 16 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/d
 739              		.file 17 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/c
 740              		.file 18 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/c
 741              		.file 19 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/l
 742              		.file 20 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/b
 743              		.file 21 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/c
 744              		.file 22 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/c
 745              		.file 23 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/a
 746              		.file 24 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/b
 747              		.file 25 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/b
 748              		.file 26 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/e
 749              		.file 27 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/e
 750              		.file 28 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/c++/7.3.1/e
 751              		.file 29 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/inclu
 752              		.file 30 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/_de
 753              		.file 31 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_stdint
 754              		.file 32 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/stdint.h"
 755              		.file 33 "<built-in>"
 756              		.file 34 "../../src/periph/periph.h"
 757              		.file 35 "../../src/bits/f1_bits_rcc.h"
 758              		.file 36 "../../src/bits/f1_bits_flash.h"
 759              		.file 37 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h"
 760              		.file 38 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_types.
 761              		.file 39 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent.h
 762              		.file 40 "../../STM32F1_files/CMSIS/core_cm3.h"
 763              		.file 41 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/inclu
 764              		.file 42 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/wchar.h"
 765              		.file 43 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/locale.h"
 766              		.file 44 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/ctype.h"
 767              		.file 45 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/stdlib.h"
 768              		.file 46 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/stdio.h"
 769              		.file 47 "/home/alexandr/code/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/errno.h
ARM GAS  /tmp/ccxildGF.s 			page 35


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/ccxildGF.s:16     .text._ZN3LCD7centralEv:0000000000000000 $t
     /tmp/ccxildGF.s:23     .text._ZN3LCD7centralEv:0000000000000000 _ZN3LCD7centralEv
     /tmp/ccxildGF.s:42     .text._ZN3LCD8set_lineEj:0000000000000000 $t
     /tmp/ccxildGF.s:49     .text._ZN3LCD8set_lineEj:0000000000000000 _ZN3LCD8set_lineEj
     /tmp/ccxildGF.s:75     .text._ZN3LCD10set_cursorEj:0000000000000000 $t
     /tmp/ccxildGF.s:82     .text._ZN3LCD10set_cursorEj:0000000000000000 _ZN3LCD10set_cursorEj
     /tmp/ccxildGF.s:192    .text.init_clock:0000000000000000 $t
     /tmp/ccxildGF.s:199    .text.init_clock:0000000000000000 init_clock
     /tmp/ccxildGF.s:366    .text.init_clock:0000000000000080 $d
     /tmp/ccxildGF.s:375    .text.startup.main:0000000000000000 $t
     /tmp/ccxildGF.s:382    .text.startup.main:0000000000000000 main
     /tmp/ccxildGF.s:398    .text._ZSt4copyIPKcPcET0_T_S4_S3_:0000000000000000 $t
     /tmp/ccxildGF.s:405    .text._ZSt4copyIPKcPcET0_T_S4_S3_:0000000000000000 _ZSt4copyIPKcPcET0_T_S4_S3_
     /tmp/ccxildGF.s:457    .text._ZN3LCDlsESt17basic_string_viewIcSt11char_traitsIcEE:0000000000000000 $t
     /tmp/ccxildGF.s:464    .text._ZN3LCDlsESt17basic_string_viewIcSt11char_traitsIcEE:0000000000000000 _ZN3LCDlsESt17basic_string_viewIcSt11char_traitsIcEE
     /tmp/ccxildGF.s:643    .text._ZN3LCDlsEj:0000000000000000 $t
     /tmp/ccxildGF.s:650    .text._ZN3LCDlsEj:0000000000000000 _ZN3LCDlsEj
     /tmp/ccxildGF.s:721    .text._ZN3LCDlsEj:0000000000000028 $d

UNDEFINED SYMBOLS
__aeabi_uidivmod
memmove
snprintf
strlen
